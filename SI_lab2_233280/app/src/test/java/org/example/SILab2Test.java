/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.List;

public class SILab2Test {

    @Test
    public void testNullItemsAndNullCardNumber() {
        RuntimeException exception = assertThrows(RuntimeException.class, () -> {
            SILab2.checkCart(null, null);
        });
        assertEquals("allItems list can't be null!", exception.getMessage());
    }

    @Test
    public void testDiscountedItemWithLargeQuantityAndPrice() {
        Item product = new Item("Keks", 10 + 1, 450, 0.2); // quantity = 11, price = 450, discount = 20%
        List<Item> items = List.of(product);
        double expected = -30 + (450 * 0.8 * 11); // -30 + 3960 = 3930
        assertEquals(expected, SILab2.checkCart(items, "1234567890123456"), 0.01);
    }

    @Test
    public void testItemWithMissingName() {
        Item product = new Item(null, 5, 100, 0.0);
        List<Item> items = List.of(product);

        RuntimeException exception = assertThrows(RuntimeException.class, () -> {
            SILab2.checkCart(items, "1234567890123456");
        });

        assertEquals("Invalid item!", exception.getMessage());
    }

    @Test
    public void testCardNumberWithInvalidLength() {
        Item product = new Item("Sok", 1, 50, 0);
        List<Item> items = List.of(product);

        RuntimeException exception = assertThrows(RuntimeException.class, () -> {
            SILab2.checkCart(items, "12345ABC"); // length < 16
        });

        assertEquals("Invalid card number!", exception.getMessage());
    }

    @Test
    public void testCardNumberWithNonDigitCharacters() {
        Item product = new Item("Voda", 2, 30, 0);
        List<Item> items = List.of(product);

        RuntimeException exception = assertThrows(RuntimeException.class, () -> {
            SILab2.checkCart(items, "12X4567890123456"); // contains 'X'
        });

        assertEquals("Invalid character in card number!", exception.getMessage());
    }

    @Test
    public void testMultipleConditionCombinations() {

        Item item1 = new Item("Item1", 5, 100, 0.0);
        assertEquals(100 * 5, SILab2.checkCart(List.of(item1), "1234567812345678"), 0.01);


        Item item2 = new Item("Item2", 11, 100, 0.0);
        assertEquals(-30 + 100 * 11, SILab2.checkCart(List.of(item2), "1234567812345678"), 0.01);


        Item item3 = new Item("Item3", 5, 100, 0.1);
        assertEquals(-30 + (100 * 0.9 * 5), SILab2.checkCart(List.of(item3), "1234567812345678"), 0.01);


        Item item4 = new Item("Item4", 11, 100, 0.2);
        assertEquals(-30 + (100 * 0.8 * 11), SILab2.checkCart(List.of(item4), "1234567812345678"), 0.01);


        Item item5 = new Item("Item5", 5, 350, 0.0);
        assertEquals(-30 + 350 * 5, SILab2.checkCart(List.of(item5), "1234567812345678"), 0.01);


        Item item6 = new Item("Item6", 12, 350, 0.0);
        assertEquals(-30 + 350 * 12, SILab2.checkCart(List.of(item6), "1234567812345678"), 0.01);


        Item item7 = new Item("Item7", 5, 350, 0.3);
        assertEquals(-30 + (350 * 0.7 * 5), SILab2.checkCart(List.of(item7), "1234567812345678"), 0.01);


        Item item8 = new Item("Item8", 15, 350, 0.2);
        assertEquals(-30 + (350 * 0.8 * 15), SILab2.checkCart(List.of(item8), "1234567812345678"), 0.01);
    }
}